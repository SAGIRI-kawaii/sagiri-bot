"""
ËØÜÂà´Áæ§ÂÜÖÁöÑBÁ´ôÈìæÊé•„ÄÅÂàÜ‰∫´„ÄÅavÂè∑„ÄÅBVÂè∑Âπ∂Ëé∑ÂèñÂÖ∂ÂØπÂ∫îÁöÑËßÜÈ¢ëÁöÑ‰ø°ÊÅØ

‰ª•‰∏ãÂá†ÁßçÊ∂àÊÅØÂùáÂèØËß¶Âèë

 - Êñ∞ÁâàBÁ´ôappÂàÜ‰∫´ÁöÑ‰∏§ÁßçÂ∞èÁ®ãÂ∫è
 - ÊóßÁâàBÁ´ôappÂàÜ‰∫´ÁöÑxmlÊ∂àÊÅØ
 - BÁ´ôÊ¶ÇÂøµÁâàÂàÜ‰∫´ÁöÑjsonÊ∂àÊÅØ
 - ÊñáÂ≠óÊ∂àÊÅØÈáåÂê´ÊúâBÁ´ôËßÜÈ¢ëÂú∞ÂùÄÔºåÂ¶Ç https://www.bilibili.com/video/{av/bvÂè∑} Ôºàm.bilibili.com ‰πüÂèØ‰ª•
 - ÊñáÂ≠óÊ∂àÊÅØÈáåÂê´ÊúâBÁ´ôËßÜÈ¢ëÂú∞ÂùÄÔºåÂ¶Ç https://b23.tv/3V31Ap
 - ÊñáÂ≠óÊ∂àÊÅØÈáåÂê´ÊúâBÁ´ôËßÜÈ¢ëÂú∞ÂùÄÔºåÂ¶Ç https://b23.tv/3V31Ap
 - BV1xx411c7mD
 - av2
"""

import re
import time
from io import BytesIO
from pathlib import Path
from loguru import logger
from typing import Literal
from PIL.Image import Image
from base64 import b64encode
from qrcode.main import QRCode
from dataclasses import dataclass

from launart import Launart
from graia.saya import Channel
from avilla.core.resource import RawResource
from avilla.core.elements import Picture, Text
from avilla.core import Context, MessageReceived
from graiax.text2img.playwright import PageOption
from graiax.shortcut.saya import listen, decorate

from shared.utils.text2img import template2img
from shared.utils.control import Switch, FunctionCall
from shared.service.aiohttp import AiohttpClientInterface

channel = Channel.current()

channel.meta['name'] = 'BÁ´ôËßÜÈ¢ë‰ø°ÊÅØËé∑Âèñ'
channel.meta['author'] = ['Red_lnn']
channel.meta['description'] = (
    'ËØÜÂà´Áæ§ÂÜÖÁöÑBÁ´ôÈìæÊé•„ÄÅÂàÜ‰∫´„ÄÅavÂè∑„ÄÅBVÂè∑Âπ∂Ëé∑ÂèñÂÖ∂ÂØπÂ∫îÁöÑËßÜÈ¢ëÁöÑ‰ø°ÊÅØ\n'
    '‰ª•‰∏ãÂá†ÁßçÊ∂àÊÅØÂùáÂèØËß¶ÂèëÔºö\n'
    ' - Êñ∞ÁâàBÁ´ôappÂàÜ‰∫´ÁöÑ‰∏§ÁßçÂ∞èÁ®ãÂ∫è\n'
    ' - ÊóßÁâàBÁ´ôappÂàÜ‰∫´ÁöÑxmlÊ∂àÊÅØ\n'
    ' - BÁ´ôÊ¶ÇÂøµÁâàÂàÜ‰∫´ÁöÑjsonÊ∂àÊÅØ\n'
    ' - ÊñáÂ≠óÊ∂àÊÅØÈáåÂê´ÊúâBÁ´ôËßÜÈ¢ëÂú∞ÂùÄÔºåÂ¶Ç https://www.bilibili.com/video/{av/bvÂè∑} Ôºàm.bilibili.com ‰πüÂèØ‰ª•Ôºâ\n'
    ' - ÊñáÂ≠óÊ∂àÊÅØÈáåÂê´ÊúâBÁ´ôËßÜÈ¢ëÂú∞ÂùÄÔºåÂ¶Ç https://b23.tv/3V31Ap\n'
    ' - ÊñáÂ≠óÊ∂àÊÅØÈáåÂê´ÊúâBVÂè∑ÔºåÂ¶Ç BV1xx411c7mD\n'
    ' - ÊñáÂ≠óÊ∂àÊÅØÈáåÂê´ÊúâavÂè∑ÔºåÂ¶Ç av2'
)

avid_re = '(av|AV)(\\d{1,12})'
bvid_re = '[Bb][Vv]1([0-9a-zA-Z]{2})4[1y]1[0-9a-zA-Z]7([0-9a-zA-Z]{2})'


@dataclass
class VideoInfo:
    cover_url: str  # Â∞ÅÈù¢Âú∞ÂùÄ
    bvid: str  # BVÂè∑
    avid: int  # avÂè∑
    title: str  # ËßÜÈ¢ëÊ†áÈ¢ò
    sub_count: int  # ËßÜÈ¢ëÂàÜPÊï∞
    pub_timestamp: int  # ËßÜÈ¢ëÂèëÂ∏ÉÊó∂Èó¥ÔºàÊó∂Èó¥Êà≥Ôºâ
    upload_timestamp: int  # ËßÜÈ¢ë‰∏ä‰º†Êó∂Èó¥ÔºàÊó∂Èó¥Êà≥Ôºå‰∏ç‰∏ÄÂÆöÂáÜÁ°ÆÔºâ
    desc: str  # ËßÜÈ¢ëÁÆÄ‰ªã
    duration: int  # ËßÜÈ¢ëÈïøÂ∫¶ÔºàÂçï‰ΩçÔºöÁßíÔºâ
    up_mid: int  # up‰∏ªmid
    up_name: str  # up‰∏ªÂêçÁß∞
    up_face: str  # up‰∏ªÂ§¥ÂÉèÂú∞ÂùÄ
    views: int  # Êí≠ÊîæÈáè
    danmu: int  # ÂºπÂπïÊï∞
    likes: int  # ÁÇπËµûÊï∞
    coins: int  # ÊäïÂ∏ÅÊï∞
    replys: int  # ËØÑËÆ∫Êï∞
    favorites: int  # Êî∂ËóèÈáè


@listen(MessageReceived)
@decorate(Switch.check())
@decorate(FunctionCall.record("bilibili_share_resolver"))
async def main(ctx: Context, event: MessageReceived):
    message = str(event.message.content)
    p = re.compile(f'({avid_re})|({bvid_re})')
    if 'b23.tv/' in message:
        message = await b23_url_extract(message)
        if not message:
            return
    video_id = p.search(message)
    if not video_id or video_id is None:
        return
    video_id = video_id.group()
    video_info = await get_video_info(video_id)
    if video_info['code'] == -404:
        return await ctx.scene.send_message('ËßÜÈ¢ë‰∏çÂ≠òÂú®')
    elif video_info['code'] != 0:
        error_text = f'Ëß£ÊûêBÁ´ôËßÜÈ¢ë {video_id} Êó∂Âá∫Èîôüëá\nÈîôËØØ‰ª£Á†ÅÔºö{video_info["code"]}\nÈîôËØØ‰ø°ÊÅØÔºö{video_info["message"]}'  # noqa
        logger.error(error_text)
        return await ctx.scene.send_message(error_text)
    else:
        video_info = await info_json_dump(video_info['data'])
        img: bytes = await gen_img(video_info)
        await ctx.scene.send_message(
            [
                Picture(resource=RawResource(img)),
                Text(
                    f'{video_info.title}\n'
                    '‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n'
                    f'UP‰∏ªÔºö{video_info.up_name}\n'
                    f'{math(video_info.views)}Êí≠Êîæ {math(video_info.likes)}Ëµû\n'
                    f'ÈìæÊé•Ôºöhttps://b23.tv/{video_info.bvid}',
                ),
            ]
        )


async def b23_url_extract(b23_url: str) -> Literal[False] | str:
    url = re.search(r'b23.tv[/\\]+([0-9a-zA-Z]+)', b23_url)
    if url is None:
        return False

    launart = Launart.current()
    session = launart.get_interface(AiohttpClientInterface).service.session

    async with session.get(f'https://{url.group()}', allow_redirects=True) as resp:
        target = str(resp.url)
    return target if 'www.bilibili.com/video/' in target else False


async def get_video_info(video_id: str) -> dict:
    launart = Launart.current()
    session = launart.get_interface(AiohttpClientInterface).service.session

    if video_id[:2].lower() == 'av':
        async with session.get(f'http://api.bilibili.com/x/web-interface/view?aid={video_id[2:]}') as resp:
            return await resp.json()
    elif video_id[:2].lower() == 'bv':
        async with session.get(f'http://api.bilibili.com/x/web-interface/view?bvid={video_id}') as resp:
            return await resp.json()
    return {}


async def info_json_dump(obj: dict) -> VideoInfo:
    return VideoInfo(
        cover_url=obj['pic'],
        bvid=obj['bvid'],
        avid=obj['aid'],
        title=obj['title'],
        sub_count=obj['videos'],
        pub_timestamp=obj['pubdate'],
        upload_timestamp=obj['ctime'],
        desc=obj['desc'].strip(),
        duration=obj['duration'],
        up_mid=obj['owner']['mid'],
        up_name=obj['owner']['name'],
        up_face=obj['owner']['face'],
        views=obj['stat']['view'],
        danmu=obj['stat']['danmaku'],
        likes=obj['stat']['like'],
        coins=obj['stat']['coin'],
        replys=obj['stat']['reply'],
        favorites=obj['stat']['favorite'],
    )


def math(num: int):
    if num < 10000:
        return str(num)
    elif num < 100000000:
        return ('%.2f' % (num / 10000)) + '‰∏á'
    else:
        return ('%.2f' % (num / 100000000)) + '‰∫ø'


template = (Path(__file__).parent / "template.html").read_text(encoding='utf-8')


async def gen_img(data: VideoInfo) -> bytes:
    video_length_m, video_length_s = divmod(data.duration, 60)  # Â∞ÜÊÄªÁöÑÁßíÊï∞ËΩ¨Êç¢‰∏∫Êó∂ÂàÜÁßíÊ†ºÂºè
    video_length_h, video_length_m = divmod(video_length_m, 60)
    if video_length_h == 0:
        video_length = f'{video_length_m}:{video_length_s}'
    else:
        video_length = f'{video_length_h}:{video_length_m}:{video_length_s}'

    desc = data.desc.strip().replace('\n', '<br/>')

    launart = Launart.current()
    session = launart.get_interface(AiohttpClientInterface).service.session

    async with session.get(f'https://api.bilibili.com/x/relation/stat?vmid={data.up_mid}') as resp:
        result = await resp.json()
        fans_num: int = result['data']['follower']

    qr = QRCode(version=2, box_size=4)
    qr.add_data(f'https://b23.tv/{data.bvid}')
    qr.make()
    qrcode: Image | None = qr.make_image()._img
    if qrcode is None:
        qrcode_src = ''
    else:
        output_buffer = BytesIO()
        qrcode.save(output_buffer, format='png')
        base64_str = b64encode(output_buffer.getvalue()).decode('utf-8')
        qrcode_src = f'data:image/png;base64,{base64_str}'

    return await template2img(
        template,
        {
            'cover_src': data.cover_url,
            'duration': video_length,
            'title': data.title,
            'play_num': math(data.views),
            'danmaku_num': math(data.danmu),
            'reply_num': math(data.replys),
            'like_num': math(data.likes),
            'coin_num': math(data.coins),
            'favorite_num': math(data.favorites),
            'desc': desc,
            'publish_time': time.strftime('%Y/%m/%d %p %I:%M:%S', time.localtime(data.upload_timestamp)),
            'profile_src': data.up_face,
            'name': data.up_name,
            'fans_num': math(fans_num),
            'qrcode_src': qrcode_src,
        },
        extra_page_option=PageOption(viewport={'width': 960, 'height': 10}),
    )
